<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAL4AAADWCAYAAABv0ziqAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wgAADsIBFShKgAAAFFtJREFUeF7tnXuwjVUfx3UP4ZBDEUVUTPeJRGg6qaRyRhRKJkp0oZuulEmlkk6a
        ETVyUmkSkZRy6aKDSG7FSbklkYPutz/XO9/1zm72WWtf1nN/nr2+f3ymec9rP+u5fPaz1/qt3/qtGv/+
        +68gxDZqqH8gxAYoPrESik+shOITK6H4xEooPrESik+shOITK6H4xEooPrESik+shOITK6H4xEooPrES
        ik+shOITK6H4xEooPrESik+shOITK6H4xEooPrESik+shOITK0ms+P/884/45ZdfxI8//ih27Nghtm3b
        RhIGnhueH54jnqf6jIMkUeL/+eeforKyUkyZMkVceumlok2bNqJJkybi6KOPFkVFRSRhNGzYUDRt2lS0
        bdtWXHnllaK8vFxs2bJF/PXXX9qz95tEiI8bMXfuXNGtWzdRq1YtUaNGDVKAHHTQQaJ27drypTZv3jzx
        999/ay74RazFx4VXVFSILl26yJui3ihSuBx88MHyC7B69epAukGxFf/AgQNi9OjRfMNbTp06dcT48ePl
        OEB1xAuxFL+qqkr2+Q455BDtRhD7gAe9evWSXqiuuCV24v/000/iggsu0C6ekIsvvtg3+WMl/m+//SZ6
        9uypXTAhAOO8m266SUb3VHecEhvxMZAdM2aMHNSoF0xIikMPPVSGs70OeGMj/ooVK0S9evW0CyVEpbi4
        WGzevFlzyAmxEP/3338XJSUl2gUSko3S0lJPcf5YiL9kyRJx2GGHaRdHSDaOPPJIsWbNGs0lU2Ih/uDB
        g7ULIyQfAwYM0FwyJXLxEZ7CJIV6UYTkAzlaSHJTnTIhcvFnzpypXRAhJmBia8GCBZpTJkQu/m233aZd
        kCmI6yJDc9iwYeLRRx8VY8eOJQkBzwsx+datW2vP1QmPPfaY5pQJkYqPUTkyLtWLMaVv375i37592nFJ
        MkAsfu/evTI9RX22pvTr1087rgmRio8w5mmnnaZdjAmNGjUSu3fv1o5JkscPP/wgn6f6jE1o3769djwT
        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
        xSdW8j8hQoNdV3rOlAAAAABJRU5ErkJggg==
</value>
  </data>
</root>